{"version":3,"sources":["../src/history.js"],"names":[],"mappings":"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","file":"history.js","sourcesContent":["/* global window, location, document, history */\nimport EventEmitter from 'events';\nimport { basePath } from './index';\n\nlet eventEmitter = new EventEmitter();\n\nexport function on(event, listener) {\n    return eventEmitter.on(event, listener);\n}\n\nexport function emit(...args) {\n    return eventEmitter.emit(...args);\n}\n\nlet started = false;\n\n// Cached regex for stripping a leading hash/slash and trailing space.\nlet routeStripper = /^[#\\/]|\\s+$/g;\n\nlet _hasPushState = Boolean(window.history && history.pushState);\nlet usePushState;\n\nconst _getHash = function (windowOverride) {\n    let match = (windowOverride || window).location.href.match(/#\\/(.*)$/);\n    return match ? match[1] : '';\n};\n\nconst _cleanFragment = function (fragment) {\n    fragment = fragment.replace(routeStripper, '');\n    if ((`/${fragment}/`).startsWith(basePath)) {\n        fragment = fragment.substr(basePath.replace(routeStripper, '').length);\n    }\n    return fragment;\n};\n\nconst _updateHash = function (location, fragment, replace) {\n    if (replace) {\n        location.replace(`${location.toString().replace(/(javascript:|#).*$/, '')}#/${fragment}`);\n    } else {\n        location.hash = `/${fragment}`;\n    }\n};\n\nlet _checkUrlInterval; // eslint-disable-line no-unused-vars\nlet _currentFragment;\nlet _updateBrowserHistory;\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let getFragment;\n\nexport function start(forceUseHash) {\n    if (started) {\n        throw new Error(/* #if DEV */'history has already been started'/* #/if */);\n    }\n    started = true;\n    usePushState = !forceUseHash && _hasPushState;\n\n    if (usePushState) {\n        getFragment = function () {\n            let fragment = location.pathname;\n            let search = location.search;\n            if (search) {\n                fragment += search;\n            }\n            return _cleanFragment(fragment);\n        };\n\n        _updateBrowserHistory = (fragment, replace) => {\n            history[replace ? 'replaceState' : 'pushState'](\n                {},\n                document.title,\n                `${location.protocol}//${location.host}${basePath}${fragment}`\n            );\n        };\n    } else {\n        getFragment = function () {\n            let fragment = _getHash();\n            return _cleanFragment(fragment);\n        };\n\n        _updateBrowserHistory = (fragment, replace) => {\n            _updateHash(location, fragment, replace);\n        };\n    }\n\n    let fragment = getFragment();\n\n    // Depending on whether we're using pushState or hashes, and whether\n    // 'onhashchange' is supported, determine how we check the URL state.\n    if (usePushState) {\n        window.addEventListener('popstate', checkUrl);\n    } else if ('onhashchange' in window) {\n        window.addEventListener('hashchange', checkUrl);\n    } else {\n        _checkUrlInterval = setInterval(checkUrl, 50);\n    }\n\n    // Determine if we need to change the base url, for a pushState link\n    // opened by a non-pushState browser.\n    _currentFragment = fragment;\n    let loc = location;\n\n    // If we've started out with a hash-based route, but we're currently\n    // in a browser where it could be `pushState`-based instead...\n    if (usePushState && loc.hash && loc.pathname === '/') {\n        _currentFragment = _getHash().replace(routeStripper, '');\n        loc.hash = '';\n        history.replaceState(\n            { fragment: _currentFragment },\n            document.title,\n            `${loc.protocol}//${loc.host}${basePath}${_currentFragment}`\n        );\n        return false;\n    }\n    return usePushState || fragment === '';\n}\n\n// Checks the current URL to see if it has changed, and if it has, calls `redirectUrl`\nexport function checkUrl() {\n    let current = getFragment();\n    if (current === _currentFragment) {\n        return false;\n    }\n\n    redirectUrl();\n}\n\n// Attempt to load the current URL fragment.\nexport function redirectUrl() {\n    _currentFragment = getFragment();\n    let fragment = basePath + _currentFragment;\n    if (fragment) {\n        let a = document.querySelector(`a[href=\"${fragment}\"]`);\n        if (a) {\n            a.click();\n        } else if (eventEmitter.emit('redirect', fragment) === false) {\n            throw new Error('Missing listener for redirect event');\n        }\n    }\n}\n\nexport function navigate(fragment, replace) {\n    fragment = (fragment || '');\n    fragment = _cleanFragment(fragment);\n\n    if (fragment.charAt(0) === '?') {\n        fragment = location.pathname + fragment;\n        fragment = _cleanFragment(fragment);\n    }\n\n    if (_currentFragment === fragment) {\n        return false;\n    }\n\n    eventEmitter.emit('changed', fragment);\n\n    _currentFragment = fragment;\n    _updateBrowserHistory(fragment, replace);\n}\n"]}