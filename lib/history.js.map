{"version":3,"sources":["../src/history.js"],"names":[],"mappings":"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","file":"history.js","sourcesContent":["import { basePath } from './index';\nimport EventEmitter from 'events';\n\nlet eventEmitter = new EventEmitter();\n\nexport function on(event, listener) {\n    return eventEmitter.on(event, listener);\n}\n\nexport function emit(...args) {\n    return eventEmitter.emit(...args);\n}\n\nlet started = false;\n\n// Cached regex for stripping a leading hash/slash and trailing space.\nlet routeStripper = /^[#\\/]|\\s+$/g;\n\nlet _hasPushState = Boolean(window.history && window.history.pushState);\nlet usePushState;\n\nconst _getHash = function (windowOverride) {\n    let match = (windowOverride || window).location.href.match(/#\\/(.*)$/);\n    return match ? match[1] : '';\n};\n\nconst _cleanFragment = function (fragment) {\n    fragment = fragment.replace(routeStripper, '');\n    if ((`/${fragment}/`).startsWith(basePath)) {\n        fragment = fragment.substr(basePath.replace(routeStripper, '').length);\n    }\n    return fragment;\n};\n\nconst _updateHash = function (location, fragment, replace) {\n    if (replace) {\n        location.replace(`${location.toString().replace(/(javascript:|#).*$/, '')}#/${fragment}`);\n    } else {\n        location.hash = `/${fragment}`;\n    }\n};\n\nlet _checkUrlInterval; // eslint-disable-line no-unused-vars\nlet _currentFragment;\nlet _updateBrowserHistory;\n\nexport let getFragment;\n\nexport function start(forceUseHash) {\n    if (started) {\n        throw new Error(/* #if DEV */'history has already been started'/* #/if */);\n    }\n    started = true;\n    usePushState = !forceUseHash && _hasPushState;\n\n    if (usePushState) {\n        getFragment = function () {\n            let fragment = window.location.pathname;\n            let search = window.location.search;\n            if (search) {\n                fragment += search;\n            }\n            return _cleanFragment(fragment);\n        };\n\n        _updateBrowserHistory = (fragment, replace) => {\n            window.history[replace ? 'replaceState' : 'pushState'](\n                {},\n                document.title,\n                `${window.location.protocol}//${window.location.host}${basePath}${fragment}`\n            );\n        };\n    } else {\n        getFragment = function () {\n            let fragment = _getHash();\n            return _cleanFragment(fragment);\n        };\n\n        _updateBrowserHistory = (fragment, replace) => {\n            _updateHash(window.location, fragment, replace);\n        };\n    }\n\n    let fragment = getFragment();\n\n    // Depending on whether we're using pushState or hashes, and whether\n    // 'onhashchange' is supported, determine how we check the URL state.\n    if (usePushState) {\n        window.addEventListener('popstate', checkUrl);\n    } else if ('onhashchange' in window) {\n        window.addEventListener('hashchange', checkUrl);\n    } else {\n        _checkUrlInterval = setInterval(checkUrl, 50);\n    }\n\n    // Determine if we need to change the base url, for a pushState link\n    // opened by a non-pushState browser.\n    _currentFragment = fragment;\n    let loc = window.location;\n\n    // If we've started out with a hash-based route, but we're currently\n    // in a browser where it could be `pushState`-based instead...\n    if (usePushState && loc.hash && loc.pathname === '/') {\n        _currentFragment = _getHash().replace(routeStripper, '');\n        loc.hash = '';\n        window.history.replaceState(\n            { fragment: _currentFragment },\n            document.title,\n            `${loc.protocol}//${loc.host}${basePath}${_currentFragment}`\n        );\n        return false;\n    }\n    return usePushState || fragment === '';\n}\n\n// Checks the current URL to see if it has changed, and if it has, calls `loadUrl`\nexport function checkUrl() {\n    let current = getFragment();\n    if (current === _currentFragment) {\n        return false;\n    }\n\n    loadUrl();\n}\n\n// Attempt to load the current URL fragment.\nexport function loadUrl() {\n    _currentFragment = getFragment();\n    let fragment = basePath + _currentFragment;\n    if (fragment) {\n        let a = document.querySelector(`a[href=\"${fragment}\"]`);\n        if (a) {\n            a.click();\n        } else {\n            if (eventEmitter.emit('load', fragment) === false) {\n                throw new Error('Missing listener for load event');\n            }\n        }\n    }\n}\n\nexport function navigate(fragment, replace) {\n    fragment = (fragment || '');\n    fragment = _cleanFragment(fragment);\n\n    if (fragment.charAt(0) === '?') {\n        fragment = window.location.pathname + fragment;\n        fragment = _cleanFragment(fragment);\n    }\n\n    if (_currentFragment == fragment) {\n        return false;\n    }\n\n    eventEmitter.emit('changed', fragment);\n\n    _currentFragment = fragment;\n    _updateBrowserHistory(fragment, replace);\n}\n"]}