{"version":3,"sources":["../src/history.js"],"names":["EventEmitter","basePath","eventEmitter","on","event","listener","emit","started","routeStripper","_hasPushState","Boolean","window","history","pushState","usePushState","_getHash","windowOverride","match","location","href","_cleanFragment","fragment","replace","startsWith","substr","length","_updateHash","toString","hash","_checkUrlInterval","_currentFragment","_updateBrowserHistory","getFragment","start","forceUseHash","Error","pathname","search","document","title","protocol","host","addEventListener","checkUrl","setInterval","loc","replaceState","current","redirectUrl","a","querySelector","click","navigate","charAt"],"mappings":"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","file":"history.js","sourcesContent":["/* global window, location, document, history */\nimport EventEmitter from 'events';\nimport { basePath } from './index';\n\nlet eventEmitter = new EventEmitter();\n\nexport function on(event, listener) {\n  return eventEmitter.on(event, listener);\n}\n\nexport function emit(...args) {\n  return eventEmitter.emit(...args);\n}\n\nlet started = false;\n\n// Cached regex for stripping a leading hash/slash and trailing space.\nlet routeStripper = /^[#\\/]|\\s+$/g;\n\nlet _hasPushState = Boolean(window.history && history.pushState);\nlet usePushState;\n\nconst _getHash = function (windowOverride) {\n  let match = (windowOverride || window).location.href.match(/#\\/(.*)$/);\n  return match ? match[1] : '';\n};\n\nconst _cleanFragment = function (fragment) {\n  fragment = fragment.replace(routeStripper, '');\n  if ((`/${fragment}/`).startsWith(basePath)) {\n    fragment = fragment.substr(basePath.replace(routeStripper, '').length);\n  }\n  return fragment;\n};\n\nconst _updateHash = function (location, fragment, replace) {\n  if (replace) {\n    location.replace(`${location.toString().replace(/(javascript:|#).*$/, '')}#/${fragment}`);\n  } else {\n    location.hash = `/${fragment}`;\n  }\n};\n\nlet _checkUrlInterval; // eslint-disable-line no-unused-vars\nlet _currentFragment;\nlet _updateBrowserHistory;\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let getFragment;\n\nexport function start(forceUseHash) {\n  if (started) {\n    throw new Error(/* #if DEV */'history has already been started'/* #/if */);\n  }\n  started = true;\n  usePushState = !forceUseHash && _hasPushState;\n\n  if (usePushState) {\n    getFragment = function () {\n      let fragment = location.pathname;\n      let search = location.search;\n      if (search) {\n        fragment += search;\n      }\n      return _cleanFragment(fragment);\n    };\n\n    _updateBrowserHistory = (fragment, replace) => {\n      history[replace ? 'replaceState' : 'pushState'](\n                {},\n                document.title,\n                `${location.protocol}//${location.host}${basePath}${fragment}`,\n            );\n    };\n  } else {\n    getFragment = function () {\n      let fragment = _getHash();\n      return _cleanFragment(fragment);\n    };\n\n    _updateBrowserHistory = (fragment, replace) => {\n      _updateHash(location, fragment, replace);\n    };\n  }\n\n  let fragment = getFragment();\n\n    // Depending on whether we're using pushState or hashes, and whether\n    // 'onhashchange' is supported, determine how we check the URL state.\n  if (usePushState) {\n    window.addEventListener('popstate', checkUrl);\n  } else if ('onhashchange' in window) {\n    window.addEventListener('hashchange', checkUrl);\n  } else {\n    _checkUrlInterval = setInterval(checkUrl, 50);\n  }\n\n    // Determine if we need to change the base url, for a pushState link\n    // opened by a non-pushState browser.\n  _currentFragment = fragment;\n  let loc = location;\n\n    // If we've started out with a hash-based route, but we're currently\n    // in a browser where it could be `pushState`-based instead...\n  if (usePushState && loc.hash && loc.pathname === '/') {\n    _currentFragment = _getHash().replace(routeStripper, '');\n    loc.hash = '';\n    history.replaceState(\n            { fragment: _currentFragment },\n            document.title,\n            `${loc.protocol}//${loc.host}${basePath}${_currentFragment}`,\n        );\n    return false;\n  }\n  return usePushState || fragment === '';\n}\n\n// Checks the current URL to see if it has changed, and if it has, calls `redirectUrl`\nexport function checkUrl() {\n  let current = getFragment();\n  if (current === _currentFragment) {\n    return false;\n  }\n\n  redirectUrl();\n}\n\n// Attempt to load the current URL fragment.\nexport function redirectUrl() {\n  _currentFragment = getFragment();\n  let fragment = basePath + _currentFragment;\n  if (fragment) {\n    let a = document.querySelector(`a[href=\"${fragment}\"]`);\n    if (a) {\n      a.click();\n    } else if (eventEmitter.emit('redirect', fragment) === false) {\n      throw new Error('Missing listener for redirect event');\n    }\n  }\n}\n\nexport function navigate(fragment, replace) {\n  fragment = (fragment || '');\n  fragment = _cleanFragment(fragment);\n\n  if (fragment.charAt(0) === '?') {\n    fragment = location.pathname + fragment;\n    fragment = _cleanFragment(fragment);\n  }\n\n  if (_currentFragment === fragment) {\n    return false;\n  }\n\n  eventEmitter.emit('changed', fragment);\n\n  _currentFragment = fragment;\n  _updateBrowserHistory(fragment, replace);\n}\n"]}