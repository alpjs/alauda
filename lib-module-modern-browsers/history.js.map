{"version":3,"sources":["../src/history.js"],"names":["EventEmitter","basePath","eventEmitter","on","event","listener","emit","args","started","routeStripper","_hasPushState","Boolean","window","history","pushState","usePushState","_getHash","windowOverride","match","location","href","_cleanFragment","fragment","replace","startsWith","substr","length","_updateHash","toString","hash","_checkUrlInterval","_currentFragment","_updateBrowserHistory","getFragment","start","forceUseHash","Error","pathname","search","document","title","protocol","host","addEventListener","checkUrl","setInterval","loc","replaceState","current","redirectUrl","a","querySelector","click","navigate","charAt"],"mappings":"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","file":"history.js","sourcesContent":["/* global window, location, document, history */\nimport EventEmitter from 'events';\nimport { basePath } from './index';\n\nlet eventEmitter = new EventEmitter();\n\nexport function on(event, listener) {\n  return eventEmitter.on(event, listener);\n}\n\nexport function emit(...args) {\n  return eventEmitter.emit(...args);\n}\n\nlet started = false;\n\n// Cached regex for stripping a leading hash/slash and trailing space.\nlet routeStripper = /^[#/]|\\s+$/g;\n\nlet _hasPushState = Boolean(window.history && history.pushState);\nlet usePushState;\n\nconst _getHash = function(windowOverride) {\n  let match = (windowOverride || window).location.href.match(/#\\/(.*)$/);\n  return match ? match[1] : '';\n};\n\nconst _cleanFragment = function(fragment) {\n  fragment = fragment.replace(routeStripper, '');\n  if (`/${fragment}/`.startsWith(basePath)) {\n    fragment = fragment.substr(basePath.replace(routeStripper, '').length);\n  }\n  return fragment;\n};\n\nconst _updateHash = function(location, fragment, replace) {\n  if (replace) {\n    location.replace(`${location.toString().replace(/(javascript:|#).*$/, '')}#/${fragment}`);\n  } else {\n    location.hash = `/${fragment}`;\n  }\n};\n\nlet _checkUrlInterval; // eslint-disable-line no-unused-vars\nlet _currentFragment;\nlet _updateBrowserHistory;\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let getFragment;\n\nexport function start(forceUseHash) {\n  if (started) {\n    throw new Error(/* #if DEV */ 'history has already been started' /* #/if */);\n  }\n  started = true;\n  usePushState = !forceUseHash && _hasPushState;\n\n  if (usePushState) {\n    getFragment = function() {\n      let fragment = location.pathname;\n      let search = location.search;\n      if (search) {\n        fragment += search;\n      }\n      return _cleanFragment(fragment);\n    };\n\n    _updateBrowserHistory = (fragment, replace) => {\n      history[replace ? 'replaceState' : 'pushState'](\n        {},\n        document.title,\n        `${location.protocol}//${location.host}${basePath}${fragment}`,\n      );\n    };\n  } else {\n    getFragment = function() {\n      let fragment = _getHash();\n      return _cleanFragment(fragment);\n    };\n\n    _updateBrowserHistory = (fragment, replace) => {\n      _updateHash(location, fragment, replace);\n    };\n  }\n\n  let fragment = getFragment();\n\n  // Depending on whether we're using pushState or hashes, and whether\n  // 'onhashchange' is supported, determine how we check the URL state.\n  if (usePushState) {\n    window.addEventListener('popstate', checkUrl);\n  } else if ('onhashchange' in window) {\n    window.addEventListener('hashchange', checkUrl);\n  } else {\n    _checkUrlInterval = setInterval(checkUrl, 50);\n  }\n\n  // Determine if we need to change the base url, for a pushState link\n  // opened by a non-pushState browser.\n  _currentFragment = fragment;\n  let loc = location;\n\n  // If we've started out with a hash-based route, but we're currently\n  // in a browser where it could be `pushState`-based instead...\n  if (usePushState && loc.hash && loc.pathname === '/') {\n    _currentFragment = _getHash().replace(routeStripper, '');\n    loc.hash = '';\n    history.replaceState(\n      { fragment: _currentFragment },\n      document.title,\n      `${loc.protocol}//${loc.host}${basePath}${_currentFragment}`,\n    );\n    return false;\n  }\n  return usePushState || fragment === '';\n}\n\n// Checks the current URL to see if it has changed, and if it has, calls `redirectUrl`\nexport function checkUrl() {\n  let current = getFragment();\n  if (current === _currentFragment) {\n    return false;\n  }\n\n  redirectUrl();\n}\n\n// Attempt to load the current URL fragment.\nexport function redirectUrl() {\n  _currentFragment = getFragment();\n  let fragment = basePath + _currentFragment;\n  if (fragment) {\n    let a = document.querySelector(`a[href=\"${fragment}\"]`);\n    if (a) {\n      a.click();\n    } else if (eventEmitter.emit('redirect', fragment) === false) {\n      throw new Error('Missing listener for redirect event');\n    }\n  }\n}\n\nexport function navigate(fragment, replace) {\n  fragment = fragment || '';\n  fragment = _cleanFragment(fragment);\n\n  if (fragment.charAt(0) === '?') {\n    fragment = location.pathname + fragment;\n    fragment = _cleanFragment(fragment);\n  }\n\n  if (_currentFragment === fragment) {\n    return false;\n  }\n\n  eventEmitter.emit('changed', fragment);\n\n  _currentFragment = fragment;\n  _updateBrowserHistory(fragment, replace);\n}\n"]}